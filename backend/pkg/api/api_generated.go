// Package short_url provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package short_url

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Details Error details
	Details *string `json:"details,omitempty"`

	// Status Response code
	Status *int `json:"status,omitempty"`
}

// Url defines model for Url.
type Url struct {
	// CreatedAt The timestamp when the URL was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// ExpiresAt Expiration date and time for the URL.
	ExpiresAt *time.Time `json:"expiresAt"`

	// Id The unique identifier for the URL.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// OriginalUrl The original URL.
	OriginalUrl *string `json:"originalUrl,omitempty"`

	// ShortUrl The short URL.
	ShortUrl *string `json:"shortUrl,omitempty"`

	// TitleUrl The URL title.
	TitleUrl *string `json:"titleUrl,omitempty"`

	// UpdatedAt The timestamp when the URL was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// User defines model for User.
type User struct {
	// Email The user's email.
	Email *openapi_types.Email `json:"email,omitempty"`

	// Id The unique identifier for the user.
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// PostUrlJSONBody defines parameters for PostUrl.
type PostUrlJSONBody struct {
	// OriginalUrl The original URL.
	OriginalUrl *string `json:"originalUrl,omitempty"`
}

// PostUrlJSONRequestBody defines body for PostUrl for application/json ContentType.
type PostUrlJSONRequestBody PostUrlJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /url)
	PostUrl(ctx echo.Context) error

	// (GET /users)
	GetUsers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUrl converts echo context to params.
func (w *ServerInterfaceWrapper) PostUrl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUrl(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/url", wrapper.PostUrl)
	router.GET(baseURL+"/users", wrapper.GetUsers)

}

type PostUrlRequestObject struct {
	Body *PostUrlJSONRequestBody
}

type PostUrlResponseObject interface {
	VisitPostUrlResponse(w http.ResponseWriter) error
}

type PostUrl200JSONResponse struct {
	Status *int `json:"status,omitempty"`
	Url    *Url `json:"url,omitempty"`
}

func (response PostUrl200JSONResponse) VisitPostUrlResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUrl400JSONResponse Error

func (response PostUrl400JSONResponse) VisitPostUrlResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse struct {
	Status *int    `json:"status,omitempty"`
	Users  *[]User `json:"users,omitempty"`
}

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers400JSONResponse Error

func (response GetUsers400JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers401JSONResponse Error

func (response GetUsers401JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /url)
	PostUrl(ctx context.Context, request PostUrlRequestObject) (PostUrlResponseObject, error)

	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostUrl operation middleware
func (sh *strictHandler) PostUrl(ctx echo.Context) error {
	var request PostUrlRequestObject

	var body PostUrlJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUrl(ctx.Request().Context(), request.(PostUrlRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUrl")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUrlResponseObject); ok {
		return validResponse.VisitPostUrlResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx echo.Context) error {
	var request GetUsersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.Request().Context(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		return validResponse.VisitGetUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
